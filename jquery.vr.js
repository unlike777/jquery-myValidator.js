/*!
 * jQuery Validate Plugin v0.2
 *
 * Copyright 2013 UNLIKE | MAHOGANY GROUP
 * Released under the MIT license
 * 
 * css classes for validation
 * .vr-required - поле обязательно для заполнения
 * .vr-email - проверка на эл. почту
 * 
 * attributes for validation
 * vr-name - имя поля, необходимо для уведомлений
 * vr-min-length - минимальная длинна
 * 
 * css classes generated by plugin
 * .vr-error - поле не валидное
 * .vr-correct - поле прошло проверку
 * 
 * additional fields
 * .vr-notice-{input name} - контейнер для отображения ошибки конкретного поля
 */

(function( $ ) {
	$.fn.myValidator = function(options) {

		//дефолтные настройки
		var settings = $.extend( {
			'speed'         : 200, //скорость проверки формыы
			'notice'        : function(text) {alert(text);}, //уведомление об ошибки в поле
			'onSubmit'      : function($this) {alert('Форма отправилась');},
			'beforeSubmit'  : function($this) {},
			'afterSubmit'   : function($this) {return false;},
			'reEmail'   	: /^([a-z0-9\.\-\_])+\@(([a-zA-Z0-9\-\_])+\.)+([a-zA-Z0-9]{2,4})+$/i
		}, options);
		
		//Нужно поменять макросы в тексте на значения в массиве
		function parse(keys, text) {
			$.each(keys, function(key, val) {
				text = text.replace('{'+key+'}', val);
			});
			return text;
		}
		
		//Нужно вывести текст ошибки + сделать фокус на поле
		function focusNotice($inp, text) {
			$inp.focus();
			settings.notice(text);
		}
		
		//Проверить конкретное поле и вернуть текст ошибки, если поле не прошло проверку, или false если все ок
		function check($inp) {
			var val = $.trim($inp.val());
			
			if ($inp.hasClass('vr-required')) {
				if (val == '') {
					return parse({name: $inp.attr('vr-name')}, 'Поле {name} обязательно для заполнения.');
				}
			}

			var min_len = $inp.attr('vr-min-length');
			if (min_len > 0) {
				if (val.length < min_len) {
					return parse({name: $inp.attr('vr-name'), min_len: min_len}, 'Количество символов для поля {name} не должно быть меньше {min_len}.');
				}
			}

			
			if ($inp.hasClass('vr-email')) {
				if (!settings.reEmail.test(val)) {
					return parse({name: $inp.attr('vr-name')}, 'Для поля {name} эл. почта указана в неправильном формате.');
				}
			}
			
			return false;
		}
		
		//финальная проверка, в момент отправления формы
		function final($form) {
			var $check = true;

			$form.find('input, textarea').not('input[type="submit"]').each(function() {
				var $inp = $(this),
					error_text = check($inp);
				
				if (error_text !== false) {
					$check = false;
					focusNotice($inp, error_text);
					return false;
				}
			});
			
			return $check;
		}

		//Провеяем форму в реальном времени
		function validate($form) {
			$form.find('input, textarea').not('input[type="submit"]').each(function() {
				var $inp = $(this),
					$inp_name = $inp.attr('name'),
					$notice_class = '.vr-notice-'+$inp_name;
				
				//если поле уже было тронуто
				if ($inp.hasClass('vr-touched')) {
					var old_val = $inp.attr('vr-data-old'),
						cur_val = $inp.val();
					
					//если поле изменилось
					if (old_val != cur_val) {
						var error_text = check($inp);
						
						$inp.attr('vr-data-old', cur_val);
						
						if (error_text !== false) {
							$inp.removeClass('vr-correct').addClass('vr-error');
							if ($inp_name != '') {
								$form.find($notice_class).html(error_text);
							}
						} else {
							$inp.removeClass('vr-error').addClass('vr-correct');
							if ($inp_name != '') {
								$form.find($notice_class).html('');
							}
						}
					}
				}
			});
		}
		
		return this.each(function() {
			
			var $form = $(this);

			/****************************************************/
			//нужно отделить уже измененные поля от еще не тронутых
			$form.find('input, textarea').not('input[type="submit"]').on('blur', function() {
				$(this).addClass('vr-touched');
			});

			//также смотрим на уже заполненные поля
			$form.find('input, textarea').not('input[type="submit"]').each(function() {
				var $inp = $(this);
				if ($.trim($inp.val()) != '') {
					$inp.addClass('vr-touched');
				}
			});
			/****************************************************/
			
			$form.on('submit', function() {

				if (settings.beforeSubmit($form) === false ||
					final($form) === false ||
					settings.onSubmit($form) === false ||
					settings.afterSubmit($form) === false)
						return false;
				
			});
			
			setInterval(function() {validate($form);}, settings.speed);
		
		});

	};
})(jQuery);